# Kickstart file automatically generated by anaconda.

install
text
#cmdline
lang en_US.UTF-8
keyboard us
network --bootproto dhcp --hostname localhost.localdomain
rootpw %password%
#firewall --enabled --port=22:tcp
firewall --disabled
authconfig --enableshadow --enablemd5
timezone --utc US/Eastern
bootloader --location=mbr
reboot

%include /tmp/ks-include.cfg

%pre --interpreter /usr/bin/python
import os, sys, re

incfile = open("/tmp/ks-include.cfg", "w")

sys.path.append("/usr/lib/anaconda")
import product

if product.productName == "Red Hat Enterprise Linux Server" and \
		float(product.productVersion) >= 4.0:
	print >> incfile, "key 2515dd4e215225dd"
if not (product.productName == "Fedora" and \
		float(product.productVersion) >= 7.0):
	print >> incfile, "langsupport --default=en_US.UTF-8 en_US.UTF-8"
	print >> incfile, "mouse none"

kcmdline = open("/proc/cmdline").read()
try:
	import shlex
	kernargs = shlex.split(kcmdline)
except ImportError:
	# RHEL4 idiots cut away shlex from python in the installation image
	# pray we get no quotes, spaces in parameters, etc.
	kernargs = kcmdline.split()

if 'installx' in kernargs:
	print >> incfile, "xconfig"
else:
	print >> incfile, "skipx"
	print >> incfile, "text"

kappend=''
for arg in kernargs:
	if re.match('console.*', arg):
		kappend += '%s ' % arg
	if 'irqpoll' == arg:
		kappend += '%s ' % arg
	if re.match('acpi=.*', arg):
		kappend += '%s ' % arg
	if re.match('selinux=.*', arg):
		kappend += '%s ' % arg
if kappend != '':
	print >> incfile, 'bootloader --location=mbr --append="%s"' % kappend

if 'i2o' in kernargs:
	print >> incfile, 'device scsi i2o_block'

drives = []
drive_re = re.compile(r'^[hs]d[a-z]$')
part_re = re.compile(r'^[hs]d[a-z][0-9]*$')
for l in open("/proc/partitions").readlines():
	lsp = l.split()
	if len(lsp) < 4:
		continue
	part = lsp[3]
	if drive_re.match(part):
		drives.append(part)
	# make sure no partition contains old metadata, by filling the first
	# and the last 16kB
	if part_re.match(part):
		# avoid overflow
		to_zero = min(int(lsp[2]), 16) << 10
		fd = os.open(os.path.join("/dev", part), os.O_RDWR)
		os.write(fd, '\0' * to_zero)
		# SEEK_END == 2
		os.lseek(fd, -to_zero, 2)
		os.write(fd, '\0' * to_zero)
		os.close(fd)


print >> incfile, "clearpart --all --initlabel --drives=" + ",".join(drives)

if 'vzt' in kernargs:
	bootsize = 500
	vzmaxopt = '--maxsize=10000'
else:
	bootsize = 200
	vzmaxopt = ''

if os.uname()[4] == 'ia64':
	bootmpt, bootfs = '/boot/efi', 'vfat'
else:
	bootmpt, bootfs = '/boot', 'ext3'

print >> incfile, "part %s --fstype=%s --size=%d" % (bootmpt, bootfs, bootsize)
print >> incfile, "part swap --recommended"
print >> incfile, "part / --fstype=ext3 --size=4000"

# only use lvm2 on top of device-mapper; on systems using lvm1 make plain
# partitions
lvm2_capable = False
for l in open("/proc/misc").readlines():
	if l.find("device-mapper") > 0:
		lvm2_capable = True
		break

if lvm2_capable:
	pvs = ["pv.%d" % n for n in range(len(drives))]
	for pv, drive in zip(pvs, drives):
		print >> incfile, "part %s --size=100 --grow --ondisk=%s" % (pv, drive)
	print >> incfile, "volgroup vzvg " + ' '.join(pvs)

	print >> incfile, "logvol /bk --fstype=ext3 --name=vz --vgname=vzvg --size=100 --grow " + vzmaxopt
else:
	print >> incfile, "part /bk --fstype=ext3 --size=100 --grow " + vzmaxopt


print >> incfile, "%packages --ignoremissing"
print >> incfile, "bison"
print >> incfile, "bridge-utils"
print >> incfile, "curl"
print >> incfile, "flex"
print >> incfile, "gcc"
print >> incfile, "gcc-c++"
print >> incfile, "gdb"
print >> incfile, "httpd"
print >> incfile, "kernel-devel"
print >> incfile, "mysql-server"
print >> incfile, "ntp"
print >> incfile, "python-devel"
print >> incfile, "rpm-build"
print >> incfile, "sendmail-cf"
print >> incfile, "strace"
print >> incfile, "vim-enhanced"
if 'installx' in kernargs:
	print >> incfile, "*xorg*"
	print >> incfile, "*gnome*"

incfile.close()
%post --log=/root/postinstall.log
#!/bin/sh
log="/root/postinstall.log"
chkconfig ntpd on
echo "ntpd set on" >> $log
umask 022
echo "umask set" >> $log
mkdir -p ~root/.ssh
echo "%public_key%" > ~root/.ssh/authorized_keys
echo "ssh key put" >> $log
